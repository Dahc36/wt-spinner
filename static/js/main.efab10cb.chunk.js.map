{"version":3,"sources":["common/formatters.ts","components/Button/index.tsx","components/Card/index.tsx","components/Input/index.tsx","components/Spinner/helpers.ts","components/Spinner/index.tsx","screens/Sample.tsx","hooks/useTransfer.ts","App.tsx","index.tsx"],"names":["formatFloat","value","Math","round","Button","className","isDisabled","isSmall","onClick","text","type","undefined","Card","body","footer","Input","id","label","onChange","useState","isFocused","setIsFocused","Boolean","htmlFor","onBlur","onFocus","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","getSvgPath","progress","startAngle","endAngle","start","end","largeArcFlag","join","svgPathDescribeArc","Spinner","dimensions","svgPath","setSvgPath","progressRef","useRef","useEffect","steps","current","timeoutId","setInterval","clearInterval","style","width","height","cx","cy","r","strokeWidth","d","min","Sample","fileSize","setFileSize","uploadSpeed","setUploadSpeed","isCanceling","setIsCanceling","isTransferDisabled","isNaN","parseFloat","onCancel","isTransfering","setIsTransfering","totalTransfered","setTotalTransfered","intervalRef","cancel","transfer","total","useTransfer","handleCancel","handleCancelYes","handleCancelNo","handleInputChange","setter","target","handleTransfer","message","renderBody","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efab10cb.chunk.js","sourcesContent":["export function formatFloat(value: number) {\n  return Math.round(value * 100) / 100;\n}\n","import './index.css';\n\ninterface Props {\n  className?: string;\n  isDisabled?: boolean;\n  isSmall?: boolean;\n  onClick(): void;\n  text: string;\n  type?: 'Primary' | 'Secondary';\n}\n\nexport function Button({\n  className,\n  isDisabled = false,\n  isSmall = false,\n  onClick,\n  text,\n  type = 'Primary',\n}: Props) {\n  return (\n    <button\n      className={`Button ${type} ${isSmall && 'small'} ${\n        isDisabled && 'disabled'\n      } ${className}`}\n      onClick={isDisabled ? undefined : onClick}\n    >\n      {text}\n    </button>\n  );\n}\n","import './index.css';\n\ninterface Props {\n  body: JSX.Element | JSX.Element[];\n  className?: string;\n  footer: JSX.Element | JSX.Element[];\n}\n\nexport function Card({ body, className, footer }: Props) {\n  return (\n    <div className={`Card-container ${className}`}>\n      <div className=\"Card-body\">{body}</div>\n\n      <div className=\"Card-footer\">{footer}</div>\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport './index.css';\n\ninterface Props {\n  id?: string;\n  label: string;\n  onChange(event: React.ChangeEvent<HTMLInputElement>): void;\n  type?: string;\n  value: string;\n}\n\nexport function Input({ id, label, onChange, type = 'text', value }: Props) {\n  const [isFocused, setIsFocused] = useState(false);\n\n  function handleBlur() {\n    setIsFocused(false);\n  }\n\n  function handleFocus() {\n    setIsFocused(true);\n  }\n\n  return (\n    <div className=\"Input-container\">\n      <label\n        className={`Input-label ${(isFocused || Boolean(value)) && 'focused'}`}\n        htmlFor={id}\n      >\n        {label}\n      </label>\n\n      <input\n        className=\"Input-input\"\n        id={id}\n        type={type}\n        onBlur={handleBlur}\n        onChange={onChange}\n        onFocus={handleFocus}\n        value={value}\n      />\n    </div>\n  );\n}\n","function polarToCartesian(\n  centerX: number,\n  centerY: number,\n  radius: number,\n  angleInDegrees: number\n) {\n  var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians),\n  };\n}\n\nfunction svgPathDescribeArc(\n  x: number,\n  y: number,\n  radius: number,\n  startAngle: number,\n  endAngle: number\n) {\n  var start = polarToCartesian(x, y, radius, endAngle);\n  var end = polarToCartesian(x, y, radius, startAngle);\n\n  var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n  var d = [\n    'M',\n    start.x,\n    start.y,\n    'A',\n    radius,\n    radius,\n    0,\n    largeArcFlag,\n    0,\n    end.x,\n    end.y,\n  ].join(' ');\n\n  return d;\n}\n\nexport function getSvgPath(radius: number, progress: number) {\n  const endAngle = ((360 - 1) * progress) / 100;\n  return svgPathDescribeArc(radius / 2, radius / 2, radius / 2, 0, endAngle);\n}\n","import { useEffect, useRef, useState } from 'react';\n\nimport './index.css';\nimport { getSvgPath } from './helpers';\n\ninterface Props {\n  className?: string;\n  dimensions: number;\n  progress: number;\n}\n\nconst STROKE_WIDTH = 10;\n\nexport function Spinner({ className, dimensions, progress }: Props) {\n  const radius = dimensions - STROKE_WIDTH;\n  const [svgPath, setSvgPath] = useState(getSvgPath(radius, progress));\n\n  const progressRef = useRef(progress);\n\n  useEffect(() => {\n    const steps = (progress - progressRef.current) / 50;\n    const timeoutId = setInterval(() => {\n      if (progressRef.current + steps > progress) {\n        clearInterval(timeoutId);\n      }\n\n      progressRef.current += steps;\n      setSvgPath(getSvgPath(radius, progressRef.current));\n    }, 20);\n\n    return () => clearInterval(timeoutId);\n  }, [progress, radius]);\n\n  return (\n    <div\n      className={`Spinner-container ${className}`}\n      style={{\n        width: `${dimensions}px`,\n        height: `${dimensions}px`,\n      }}\n    >\n      <svg\n        className=\"Spinner-svg\"\n        style={{\n          width: `${radius}px`,\n          height: `${radius}px`,\n        }}\n      >\n        <circle cx=\"50%\" cy=\"50%\" r=\"50%\" strokeWidth={STROKE_WIDTH} />\n        <path d={svgPath} strokeWidth={STROKE_WIDTH} />\n      </svg>\n\n      <span className=\"Spinner-progress\">\n        {Math.min(99, Math.round(progress))}\n        <span className=\"Spinner-percentage\">%</span>\n      </span>\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { formatFloat } from '../common/formatters';\nimport { Button } from '../components/Button';\nimport { Card } from '../components/Card';\nimport { Input } from '../components/Input';\nimport { Spinner } from '../components/Spinner';\nimport { useTransfer } from '../hooks/useTransfer';\n\nimport './Sample.css';\n\nexport function Sample() {\n  const [fileSize, setFileSize] = useState('2.125');\n  const [uploadSpeed, setUploadSpeed] = useState('12.63');\n\n  const [isCanceling, setIsCanceling] = useState(false);\n\n  const isTransferDisabled =\n    isNaN(parseFloat(fileSize)) ||\n    isNaN(parseFloat(uploadSpeed)) ||\n    parseFloat(fileSize) <= 0 ||\n    parseFloat(uploadSpeed) <= 0;\n\n  const { cancel, isTransfering, progress, totalTransfered, transfer } =\n    useTransfer(fileSize, uploadSpeed, () => {\n      setIsCanceling(false);\n    });\n\n  function handleCancel() {\n    setIsCanceling(true);\n  }\n\n  function handleCancelYes() {\n    cancel();\n    setIsCanceling(false);\n  }\n\n  function handleCancelNo() {\n    setIsCanceling(false);\n  }\n\n  const handleInputChange =\n    (setter: (value: string) => void) =>\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      setter(value);\n\n  function handleTransfer() {\n    transfer();\n  }\n\n  function renderBody() {\n    if (isTransfering) {\n      const message = isCanceling ? (\n        <h2 className=\"Sample-h2\">Cancel this transfer?</h2>\n      ) : (\n        <>\n          <h2 className=\"Sample-h2\">Transferring...</h2>\n          <p className=\"Sample-p\">\n            {formatFloat(totalTransfered)} MB of{' '}\n            {formatFloat(parseFloat(fileSize) * 1000)} MB uploaded\n          </p>\n        </>\n      );\n      return (\n        <div className=\"Sample-Spinner-container\">\n          <Spinner\n            className=\"Sample-Spinner\"\n            dimensions={170}\n            progress={progress}\n          />\n          {message}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Sample-input-container\">\n        <Input\n          id=\"file-size\"\n          label=\"File Size (GB)\"\n          onChange={handleInputChange(setFileSize)}\n          type=\"number\"\n          value={fileSize}\n        />\n        <Input\n          id=\"upload-speed\"\n          label=\"Upload Speed (Mbps)\"\n          onChange={handleInputChange(setUploadSpeed)}\n          type=\"number\"\n          value={uploadSpeed}\n        />\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    if (isTransfering) {\n      if (isCanceling) {\n        return (\n          <div className=\"Sample-buttons-container\">\n            <Button\n              className=\"Sample-button-no\"\n              isSmall\n              onClick={handleCancelNo}\n              text=\"No\"\n              type=\"Secondary\"\n            />\n            <Button isSmall onClick={handleCancelYes} text=\"Yes\" />\n          </div>\n        );\n      }\n\n      return (\n        <div className=\"Sample-buttons-container\">\n          <Button onClick={handleCancel} text=\"Cancel\" type=\"Secondary\" />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Sample-buttons-container\">\n        <Button\n          isDisabled={isTransferDisabled}\n          onClick={handleTransfer}\n          text=\"Transfer\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Card\n      className=\"Sample-container\"\n      body={renderBody()}\n      footer={renderFooter()}\n    />\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\n\nconst UPLOADS_PER_SECOND = 2;\n\nexport function useTransfer(\n  fileSize: string,\n  uploadSpeed: string,\n  onCancel: () => void\n) {\n  const [isTransfering, setIsTransfering] = useState(false);\n  const [totalTransfered, setTotalTransfered] = useState(0);\n\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    return () => intervalRef.current && clearInterval(intervalRef.current);\n  }, []);\n\n  function cancel() {\n    intervalRef.current && clearInterval(intervalRef.current);\n    setIsTransfering(false);\n  }\n\n  function transfer() {\n    setIsTransfering(true);\n    setTotalTransfered(0);\n    let total = 0;\n\n    intervalRef.current = setInterval(() => {\n      if (total > parseFloat(fileSize) * 1000) {\n        cancel();\n        onCancel();\n      }\n\n      total += parseFloat(uploadSpeed) / UPLOADS_PER_SECOND;\n      setTotalTransfered(total);\n    }, 1000 / UPLOADS_PER_SECOND);\n  }\n\n  return {\n    cancel,\n    isTransfering,\n    progress: (100 * totalTransfered) / (parseFloat(fileSize) * 1000),\n    totalTransfered,\n    transfer,\n  };\n}\n","import { Sample } from './screens/Sample';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App-container\">\n      <Sample />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}